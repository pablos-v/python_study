# Задачи 32, 33, 35, 36, 38, 39, 42, 43 в приоритете т к они попроще
# Задачи 34, 37, 40,  41, 44  посложнее, можно их оставить на потом

# 32 Дана последовательность чисел. Получить список неповторяющихся элементов исходной последовательности
# Пример: [1, 2, 3, 5, 1, 5, 3, 10] => [1, 2, 3, 5, 10]

# li = [1, 2, 3, 2, 3, 4, 3, 4, 5]
# res = list(set(li))
# print(res)

# 33 Задана натуральная степень k. Сформировать случайным образом список коэффициентов 
# (значения от 0 до 100) многочлена и записать в файл многочлен степени k. 
# *Пример: k=2 => 2*x² + 4*x + 5 = 0 или x² + 5 = 0 или 10*x² = 0

# import random


# def koef(k):
#     return [random.randint(0,100) for i in range(k + 1)]


# def el(li, k, l):
#     res_list = ''
#     for m in range(0, l):
#         if k == 1: res_list += (f'{li[m]}x + ')
#         elif k == 0: res_list += (f'{li[m]} = 0')
#         else:
#             res_list += (f'{li[m]}x^{k} + ')
#         k -= 1
#     return res_list

# def main():
#     li = koef(3)
#     result = el(li, 3, len(li))

#     with open ("33.txt", 'w') as file:
#         file.write(result)

# main()

# 34 Даны два файла в каждом из которых находится запись многочлена. 
# Сформировать файл содержащий сумму многочленов.



# 35 В файле находится N натуральных чисел, записанных через пробел. Среди чисел не хватает одного, 
# чтобы выполнялось условие A[i] - 1 = A[i-1]. Найти его.

# def main():
#     with open('35.txt') as file:
#         A = [int(x) for x in file.read().split()]
#     print(finder(A))


# def finder(A):
#     for i in range(1, len(A)):
#         if not A[i] - 1 == A[i-1]:
#             return A[i] - 1


# main()

# 36 Дан список чисел. Выделить среди них числа, удовлетворяющие условию: 
# следующее больше предыдущего. 
# Пример: [1, 5, 2, 3, 4, 6, 1, 7] => [1, 2, 3] или [1, 7] или [1, 6, 7] и т.д. 
# Порядок элементов менять нельзя



# 37 Дан список чисел. Выделить среди них максимальное количество чисел, 
# удовлетворяющих условию предыдущей задачи. 
# Пример: [1, 5, 2, 3, 4, 6, 1, 7] => [1, 2, 3, 4, 6, 7]



# 38 Напишите программу, удаляющую из текста все слова содержащие "абв".



# 39 Помните игру с конфетами из модуля "Математика и Информатика"? 
# Создайте такую игру для игры человек против человека
#   a Добавьте игру против бота
#   b Подумайте как наделить бота "интеллектом" 


# 40 Вы когда-нибудь играли в игру "Крестики-нолики"? Попробуйте создать её.



# 41 Написать программу вычисления арифметического выражения заданного строкой. 
# Используются операции +,-,/,*. приоритет операций стандартный. 
# Пример: 2+2 => 4; 1+2*3 => 7; 1-2*3 => -5; 
#   a Добавить возможность использования скобок, меняющих приоритет операций. 
#     Пример: 1+2*3 => 7; (1+2)*3 => 9;



# 42 Реализовать RLE (https://en.wikipedia.org/wiki/Run-length_encoding) алгоритм. 
# реализовать модуль сжатия и восстановления данных.
#   a входные и выходные данные хранятся в отдельных файлах



# Дана последовательность чисел. Получить список уникальных элементов заданной последовательности.
# Пример: [1, 2, 3, 5, 1, 5, 3, 10] => [2, 10]



# 44 Секретная задача


