# 11 Для натурального N создать список: 1, -3, 9, -27, 81 и т.д.

# def sequence_3_powered(N):
#     return [(-3)**i for i in range(N)]


# print(sequence_3_powered(5))

# 12 Для натурального N создать словарь индекс-значение, состоящий
# из элементов последовательности 3k + 1.

# Имеется ввиду Гипо́теза Ко́ллатца?

# def collatz_sequence(N):
#     dict = {}
#     while N != 1:
#         if N % 2 == 0:
#             dict[N] = N // 2
#         else:
#             dict[N] = N * 3 + 1
#         N = dict[N]
#     return dict

# print(collatz_sequence(3))

# 13 Пользователь задаёт две строки. Определить количество количество
# вхождений одной строки в другой.

# print(input("We will take a look at this string: ").count(input("And count how many times we met this string: ")))

# 14 Подсчитать сумму цифр в вещественном числе.

# def sum_dec_digits(a):
#     sum = 0
#     for i in str(a):
#         if i.isdecimal():
#             sum += int(i)
#     return sum


# print(sum_dec_digits(1.234))

# 15 Написать программу получающую набор произведений чисел от 1 до N.
# Пример: пусть N = 4, тогда [ 1, 2, 6, 24 ]

# def factorial_row(n):
#     ls = [x for x in range(1, n + 1)]
#     mult = 1
#     i = 0
#     while i < n:
#         ls[i] *= mult
#         mult = ls[i]
#         i += 1
#     return ls

# print(factorial_row(6))

# 16 Задать список из n чисел последовательности (1+1/n)**n и вывести на экран их сумму

# def sum_sequence(n):
#     ls = []
#     for i in range(1,n+1):
#         ls.append((1+1/i)**i)
#     return ls


# print(sum(sum_sequence(5)))

# 17 Задать список из N элементов, заполненных числами из [-N, N].
# Найти произведение элементов на указанных позициях. Позиции хранятся
# в файле file.txt в одной строке одно число

from random import randint
import my_box


def create_list(N):
    return [randint(-N, N) for i in range(N)]


def multiply(list, elements):
    result = 1
    for i in range(len(list)):
        if i in elements:
            result *= list[i]
    return result


def main(N):
    list = create_list(N)
    elements = my_box.int_from_txt_to_list('file.txt')
    print("Given list:", list)
    print("Element indexes to multiply:", elements)
    print("Multiplication result:", multiply(list, elements))


main(10)

# 18 Реализовать алгоритм перемешивания списка.


# 19 Реализовать алгоритм задания случайных чисел.
# Без использования встроенного генератора псевдослучайных чисел


# 20 Определить, присутствует ли в заданном списке строк, некоторое число
# 21 Определить, позицию второго вхождения строки в списке либо сообщить, что его нет.
# 22 Найти сумму чисел списка стоящих на нечетной позиции
# 23 Найти произведение пар чисел в списке. Парой считаем первый и последний элемент, второй и предпоследний и т.д. Пример: [2, 3, 4, 5, 6] => [12, 15, 16]; [2, 3, 5, 6] => [12, 15]
# 24 В заданном списке вещественных чисел найдите разницу между максимальным и минимальным значением дробной части элементов. Пример: [1.1, 1.2, 3.1, 5, 10.01] => 0.19
# 25 Написать программу преобразования десятичного числа в двоичное
# 26 Дано число. Составить список чисел Фибоначчи, в том числе для отрицательных индексов
# 27 Строка содержит набор чисел. Показать большее и меньшее число
# 28 Найти корни квадратного уравнения Ax² + Bx + C = 0
#       Математикой
#       Используя дополнительные библиотеки*
# 29 Найти НОК двух чисел
# 30 Вычислить число  c заданной точностью d Пример: при d = 0.001,  = 3.141. 10-1d10-10

# 31 Составить список простых множителей натурального числа N
